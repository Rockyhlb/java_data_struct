package others;

/**
 * @BelongsProject: exercises
 * @BelongsPackage: others
 * @CreateTime : 2024/5/22 16:38
 * @Description: TODO
 * @Author: code_hlb
 */
public class Demo2 {
    /**
     * 190. 颠倒二进制位
     * 颠倒给定的 32 位无符号整数的二进制位。
     * 提示：
     * 请注意，在某些语言（如 Java）中，没有无符号整数类型。
     * 在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。
     * 因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
     * 示例 1：
     * 输入：n = 00000010100101000001111010011100
     * 输出：964176192 (00111001011110000010100101000000)
     * 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
     * 示例 2：
     * 输入：n = 11111111111111111111111111111101
     * 输出：3221225471 (10111111111111111111111111111111)
     * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
     * 提示：
     * 输入是一个长度为 32 的二进制字符串
     */
    public static int reverseBits(int n) {
        // 不讲武德^_^
        return Integer.reverse(n);   // 底层实现其实就是位运算分治的思想
    }

    public static int reverseBits1(int n) {
        // 方法1：逐位颠倒
        int res = 0;
        for (int i = 0; i < 32; i++) {
            // 从低位往高位枚举 n 的每一位，将其倒序添加到翻转结果 res 中
            res |= (n & 1) << (31 - i);
            // 每枚举一位就将 n 右移一位，让 n 的当前最低位就是我们要枚举的比特位
            n >>>= 1;
        }
        return res;
    }

    private static final int M1 = 0x55555555; // 01010101 01010101 01010101 01010101
    private static final int M2 = 0x33333333; // 00110011 00110011 00110011 00110011
    private static final int M4 = 0x0f0f0f0f; // 00001111 00001111 00001111 00001111
    private static final int M8 = 0x00ff00ff; // 00000000 11111111 00000000 11111111

    public int reverseBits2(int n) {
        // 方法2：位运算分治
        // n >>> 1 & M1：将 n 向右移动一位（相当于将所有位向右移动一位），然后与掩码 M1 进行位与运算，这会将原始数的偶数位保存下来。
        // (n & M1) << 1：n 与掩码 M1 进行位与运算（相当于将所有位向左移动一位），这会将原始数的奇数位保存下来。
        // 最后，将这两个结果进行位或运算，得到了奇偶位互换的结果。
        n = n >>> 1 & M1 | (n & M1) << 1;
        n = n >>> 2 & M2 | (n & M2) << 2;
        n = n >>> 4 & M4 | (n & M4) << 4;
        n = n >>> 8 & M8 | (n & M8) << 8;
        // 将 n 向右移动十六位，与 n 向左移动十六位进行位或运算，完成了整个反转操作
        return n >>> 16 | n << 16;
    }

    public static void main(String[] args) {
        // 输入：n = 00000010100101000001111010011100
        int n = 43261596;
        System.out.println(reverseBits(n));
        System.out.println(reverseBits1(n));
    }
}