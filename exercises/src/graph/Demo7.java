package graph;

import java.util.LinkedList;
import java.util.Queue;

/**
 * @BelongsProject: exercises
 * @BelongsPackage: graph
 * @CreateTime : 2024/6/22 21:53
 * @Description: TODO
 * @Author: code_hlb
 */
public class Demo7 {
    /**
     * 909. 蛇梯棋
     * 给你一个大小为 n x n 的整数矩阵 board ，方格按从 1 到 n2 编号，编号遵循 转行交替方式 ，从左下角开始 （即，从 board[n - 1][0] 开始）每一行交替方向。
     * 玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。
     * 每一回合，玩家需要从当前方格 curr 开始出发，按下述要求前进：
     * 选定目标方格 next ，目标方格的编号符合范围 [curr + 1, min(curr + 6, n2)] 。
     * 该选择模拟了掷 六面体骰子 的情景，无论棋盘大小如何，玩家最多只能有 6 个目的地。
     * 传送玩家：如果目标方格 next 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 next 。
     * 当玩家到达编号 n2 的方格时，游戏结束。
     * r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。
     * 编号为 1 和 n2 的方格上没有蛇或梯子。
     * 注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，玩家也 不能 继续移动。
     * 举个例子，假设棋盘是 [[-1,4],[-1,3]] ，第一次移动，玩家的目标方格是 2 。那么这个玩家将会顺着梯子到达方格 3 ，但 不能 顺着方格 3 上的梯子前往方格 4 。
     * 返回达到编号为 n2 的方格所需的最少移动次数，如果不可能，则返回 -1。
     * 示例 1：
     * 输入：board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
     * 输出：4
     * 解释：
     * 首先，从方格 1 [第 5 行，第 0 列] 开始。
     * 先决定移动到方格 2 ，并必须爬过梯子移动到到方格 15 。
     * 然后决定移动到方格 17 [第 3 行，第 4 列]，必须爬过蛇到方格 13 。
     * 接着决定移动到方格 14 ，且必须通过梯子移动到方格 35 。
     * 最后决定移动到方格 36 , 游戏结束。
     * 可以证明需要至少 4 次移动才能到达最后一个方格，所以答案是 4 。
     * 示例 2：
     * 输入：board = [[-1,-1],[-1,3]]
     * 输出：1
     * 提示：
     * n == board.length == board[i].length
     * 2 <= n <= 20
     * grid[i][j] 的值是 -1 或在范围 [1, n2] 内
     * 编号为 1 和 n2 的方格上没有蛇或梯子
     */
    public static int snakesAndLadders(int[][] board) {
        /*
         * 将棋盘抽象成一个 n*n 的有向图，对于每个节点x，若x+i(1<=i<=6)上没有蛇或梯子，则连一条x->x+i的有向边，反之则将该有向边连接到x+i所指引的位置
         * 因此该题简化成 在有向图上查找从 1 -> n^2 的最短路径长度
         * 使用广搜进行遍历，将节点编号和到达该节点的次数作为搜索状态进行传递
         * 并且还需要根据编号获取对应行列下标，假设当前编号为id，
         * 则其位于倒数第 (id - 1) / n 行，
         * 位于第 (id - 1) % n 列(当前行是偶数行，编号方向为从左向右)，
         * 由于蛇梯棋的每一行会交换方向，所以列值也会跟着改变，当为奇数行时，编号方向为从右向左，因此位于第 n - 1 - column 列
         * */
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        Queue<int[]> queue = new LinkedList<>();
        // 插入起点{1，0}: 起点编号为1，当前移动次数为0
        queue.offer(new int[]{1, 0});
        // 广搜
        while (!queue.isEmpty()) {
            int[] point = queue.poll();
            for (int i = 1; i <= 6; i++) {
                // 记录下一个位置的坐标
                int next = point[0] + i;
                if (next > n * n) {
                    break;
                }
                // 根据下一节点的编号获取行列
                int[] rc = id2rc(next, n);
                // 判断下一步坐标上是否有蛇或梯子
                if (board[rc[0]][rc[1]] > 0) {
                    next = board[rc[0]][rc[1]];
                }
                if (next == n * n) {
                    return point[1] + 1;
                }
                // 如果下个节点未被遍历过，则将该节点加入队列
                if (!visited[next]) {
                    visited[next] = true;
                    // 更新状态
                    queue.offer(new int[]{next, point[1] + 1});
                }
            }
        }
        return -1;
    }

    private static int[] id2rc(int id, int n) {
        int row = (id - 1) / n, column = (id - 1) % n;
        // 当前行是奇数行时，将列值转置
        if (row % 2 == 1) {
            column = n - 1 - column;
        }
        // 前面得出的行是正方向的，将其倒置返回
        return new int[]{n - 1 - row, column};
    }

    public static void main(String[] args) {
        // 输入：board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
        int[][] board = {
                {-1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, 35, -1, -1, 13, -1},
                {-1, -1, -1, -1, -1, -1},
                {-1, 15, -1, -1, -1, -1}
        };
        System.out.println(snakesAndLadders(board));  // 4
    }
}
